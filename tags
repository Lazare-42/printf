!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARCH	Makefile	/^ARCH = ar rc$/;"	m
BCK	includes/printf.h	/^# define BCK /;"	d
BDIR	Makefile	/^BDIR = bin_printf$/;"	m
BLD	includes/printf.h	/^# define BLD /;"	d
BLK	includes/printf.h	/^# define BLK /;"	d
BLU	includes/printf.h	/^# define BLU /;"	d
BUFF_SIZE	includes/get_next_line.h	/^# define BUFF_SIZE /;"	d
BUFF_SIZE	includes/printf.h	/^# define BUFF_SIZE /;"	d
CC	Makefile	/^CC = gcc -Wall -Werror -Wextra -Ofast -c$/;"	m
CLEAN	Makefile	/^CLEAN = rm -rf $(ODIR) $(BDIR)$/;"	m
CYN	includes/printf.h	/^# define CYN /;"	d
FRM	includes/printf.h	/^# define FRM /;"	d
GET_NEXT_LINE_H	includes/get_next_line.h	/^# define GET_NEXT_LINE_H$/;"	d
GRN	includes/printf.h	/^# define GRN /;"	d
ITA	includes/printf.h	/^# define ITA /;"	d
LIBFT_H	includes/libft.h	/^# define LIBFT_H$/;"	d
LIBFT_OBJECT	Makefile	/^LIBFT_OBJECT = $(addprefix $(ODIR)\/, $(LIBFT_SRCS:.c=.o))$/;"	m
LIBFT_SRCS	Makefile	/^LIBFT_SRCS =	ft_advance_for_quotes.c \\$/;"	m
MAG	includes/printf.h	/^# define MAG /;"	d
NAME	Makefile	/^NAME = libftprintf.a$/;"	m
ODIR	Makefile	/^ODIR = bin_libft$/;"	m
PRINTF_H	includes/printf.h	/^# define PRINTF_H$/;"	d
PRINTF_OBJECT	Makefile	/^PRINTF_OBJECT = $(addprefix $(BDIR)\/, $(PRINTF_SRCS:.c=.o))$/;"	m
PRINTF_SRCS	Makefile	/^PRINTF_SRCS =   ft_printf.c \\$/;"	m
RED	includes/printf.h	/^# define RED /;"	d
RESET	includes/printf.h	/^# define RESET /;"	d
SWP	includes/printf.h	/^# define SWP /;"	d
S_LIB_DIR	Makefile	/^S_LIB_DIR = libft_srcs$/;"	m
S_PRINTF_DIR	Makefile	/^S_PRINTF_DIR = printf_srcs$/;"	m
UND	includes/printf.h	/^# define UND /;"	d
WHT	includes/printf.h	/^# define WHT /;"	d
YEL	includes/printf.h	/^# define YEL /;"	d
apply_flag_padding	printf_srcs/precision_width.c	/^void		apply_flag_padding(t_printf *argument)$/;"	f
apply_plus_minus_flags	printf_srcs/precision_width.c	/^void		apply_plus_minus_flags(t_printf *argument)$/;"	f
apply_precision	printf_srcs/precision_width.c	/^void		apply_precision(t_printf *argument)$/;"	f
apply_precision_width	printf_srcs/ft_printf.c	/^static void		apply_precision_width(t_printf *argument)$/;"	f	file:
apply_sharp	printf_srcs/precision_width.c	/^void		apply_sharp(t_printf *argument)$/;"	f
apply_width	printf_srcs/precision_width.c	/^void		apply_width(t_printf *argument)$/;"	f
arg_len	includes/printf.h	/^	int				arg_len;$/;"	m	struct:s_printf
before_arg_len	includes/printf.h	/^	int				before_arg_len;$/;"	m	struct:s_printf
before_len	includes/printf.h	/^	int				before_len;$/;"	m	struct:s_printf
content	includes/libft.h	/^	void			*content;$/;"	m	struct:s_list
content_size	includes/libft.h	/^	size_t			content_size;$/;"	m	struct:s_list
continue_color_formatting	printf_srcs/bonus_colors_formatting.c	/^const char	*continue_color_formatting(const char	*format, t_str *argument)$/;"	f
continue_font_formatting	printf_srcs/bonus_colors_formatting.c	/^const char	*continue_font_formatting(const char	*format, t_str *argument)$/;"	f
convert_overflow	printf_srcs/base_converter.c	/^intmax_t				convert_overflow(int sizeof_var, intmax_t number)$/;"	f
count_letters	libft_srcs/ft_split_char.c	/^static int		count_letters(char *str, int i, char c)$/;"	f	file:
count_letters	libft_srcs/ft_split_whitespaces.c	/^static int		count_letters(char *str, int i)$/;"	f	file:
count_letters	libft_srcs/ft_split_whitespaces_nokots.c	/^static int		count_letters(char *str, int i)$/;"	f	file:
count_words	libft_srcs/ft_split_char.c	/^static int		count_words(char *str, char c)$/;"	f	file:
count_words	libft_srcs/ft_split_whitespaces.c	/^static int		count_words(char *str)$/;"	f	file:
count_words	libft_srcs/ft_split_whitespaces_nokots.c	/^static int		count_words(char *str)$/;"	f	file:
create_tab	libft_srcs/ft_split_char.c	/^static char		**create_tab(char **tab, char *str, char c)$/;"	f	file:
create_tab	libft_srcs/ft_split_whitespaces.c	/^static char		**create_tab(char **tab, char *str)$/;"	f	file:
create_tab	libft_srcs/ft_split_whitespaces_nokots.c	/^static char		**create_tab(char **tab, char *str)$/;"	f	file:
debug	libft_srcs/ft_debug.c	/^void	debug(void)$/;"	f
double_it	libft_srcs/ft_atof.c	/^static double	double_it(const char *nptr, double number)$/;"	f	file:
fd	includes/get_next_line.h	/^	int				fd;$/;"	m	struct:s_gnl
font_formatting	printf_srcs/bonus_colors_formatting.c	/^const char	*font_formatting(const char	*format, t_str *argument)$/;"	f
ft_advance_str_for_quotes	libft_srcs/ft_advance_for_quotes.c	/^int		ft_advance_str_for_quotes(char *str, int i)$/;"	f
ft_atof	libft_srcs/ft_atof.c	/^double			ft_atof(const char *nptr)$/;"	f
ft_atoi	libft_srcs/ft_atoi.c	/^int	ft_atoi(const char *nptr)$/;"	f
ft_bzero	libft_srcs/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_check_endianness	libft_srcs/ft_check_endianness.c	/^int	ft_check_endianness(void)$/;"	f
ft_count_tab	libft_srcs/ft_strsplit.c	/^static char	**ft_count_tab(char const *s, char c)$/;"	f	file:
ft_del_tab_str	libft_srcs/ft_del_tab_str.c	/^void	ft_del_tab_str(void ***tab, void **str)$/;"	f
ft_double_size	libft_srcs/ft_double_size.c	/^int	ft_double_size(double nbr)$/;"	f
ft_freetables	libft_srcs/ft_freetables.c	/^void	ft_freetables(char **str)$/;"	f
ft_int_size	libft_srcs/ft_int_size.c	/^int	ft_int_size(int nbr)$/;"	f
ft_isalnum	libft_srcs/ft_isalnum.c	/^int		ft_isalnum(int c)$/;"	f
ft_isalpha	libft_srcs/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libft_srcs/ft_isascii.c	/^int		ft_isascii(int c)$/;"	f
ft_isdigit	libft_srcs/ft_isdigit.c	/^int		ft_isdigit(int c)$/;"	f
ft_isprint	libft_srcs/ft_isprint.c	/^int		ft_isprint(int c)$/;"	f
ft_itoa	libft_srcs/ft_itoa.c	/^char			*ft_itoa(int nbr)$/;"	f
ft_joinfree_heapstr_stackstr	libft_srcs/ft_joinfree_heapstr_stackstr.c	/^char				*ft_joinfree_heapstr_stackstr(char **s1, char *s2,$/;"	f
ft_joinfree_heapstr_stackstr	libft_srcs/ft_joinfree_stackstr_heapstr.c	/^char				*ft_joinfree_heapstr_stackstr(char **s1, char *s2,$/;"	f
ft_lstadd	libft_srcs/ft_lstadd.c	/^void	ft_lstadd(t_list **alst, t_list *new)$/;"	f
ft_lstdel	libft_srcs/ft_lstdel.c	/^void	ft_lstdel(t_list **alst, void (*del)(void *, size_t))$/;"	f
ft_lstdelone	libft_srcs/ft_lstdelone.c	/^void	ft_lstdelone(t_list **alst, void (*del)(void*, size_t))$/;"	f
ft_lstiter	libft_srcs/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(t_list *elem))$/;"	f
ft_lstmap	libft_srcs/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, t_list *(*f)(t_list *elem))$/;"	f
ft_lstnew	libft_srcs/ft_lstnew.c	/^t_list	*ft_lstnew(void const *content, size_t content_size)$/;"	f
ft_ltoa	libft_srcs/ft_ltoa.c	/^char			*ft_ltoa(intmax_t nbr)$/;"	f
ft_make_blocks_for_quotes	libft_srcs/ft_advance_for_quotes.c	/^char	*ft_make_blocks_for_quotes(char *str, int *i)$/;"	f
ft_memalloc	libft_srcs/ft_memalloc.c	/^void	*ft_memalloc(size_t size)$/;"	f
ft_memccpy	libft_srcs/ft_memccpy.c	/^void	*ft_memccpy(void *dest, const void *src, int c, size_t n)$/;"	f
ft_memchr	libft_srcs/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft_srcs/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft_srcs/ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f
ft_memdel	libft_srcs/ft_memdel.c	/^void	ft_memdel(void **ap)$/;"	f
ft_memmove	libft_srcs/ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t n)$/;"	f
ft_memset	libft_srcs/ft_memset.c	/^void	*ft_memset(void *s, int c, size_t n)$/;"	f
ft_mins_to_caps	libft_srcs/ft_mins_to_caps.c	/^char	ft_mins_to_caps(char c)$/;"	f
ft_myexit	libft_srcs/ft_myexit.c	/^void	ft_myexit(char *str)$/;"	f
ft_mystriter	libft_srcs/ft_mystriter.c	/^void	ft_mystriter(char **s, char (*f)(char))$/;"	f
ft_printf	printf_srcs/ft_printf.c	/^int				ft_printf(const char *restrict format, ...)$/;"	f
ft_printtables	libft_srcs/ft_printtables.c	/^void	ft_printtables(char **str)$/;"	f
ft_put_error_return_null	libft_srcs/ft_put_error_return_null.c	/^void	*ft_put_error_return_null(char *error_msg, char *function_name)$/;"	f
ft_put_fatal_error	libft_srcs/ft_put_fatal_error.c	/^int		ft_put_fatal_error(char *str)$/;"	f
ft_putabs	libft_srcs/ft_putabs.c	/^void	ft_putabs(char **str, char separator)$/;"	f
ft_putchar	libft_srcs/ft_putchar.c	/^void	ft_putchar(char c)$/;"	f
ft_putchar_fd	libft_srcs/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl	libft_srcs/ft_putendl.c	/^void	ft_putendl(char const *s)$/;"	f
ft_putendl_fd	libft_srcs/ft_putendl_fd.c	/^void	ft_putendl_fd(char const *s, int fd)$/;"	f
ft_putnbr	libft_srcs/ft_putnbr.c	/^void	ft_putnbr(int n)$/;"	f
ft_putnbr_fd	libft_srcs/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr	libft_srcs/ft_putstr.c	/^void	ft_putstr(char *str)$/;"	f
ft_putstr_fd	libft_srcs/ft_putstr_fd.c	/^void	ft_putstr_fd(char const *s, int fd)$/;"	f
ft_putwhites	libft_srcs/ft_putwhites.c	/^void	ft_putwhites(int i)$/;"	f
ft_s_base_converter	libft_srcs/ft_s_base_converter.c	/^char	*ft_s_base_converter(int base_size, intmax_t number)$/;"	f
ft_split_char	libft_srcs/ft_split_char.c	/^char			**ft_split_char(char *str, char c)$/;"	f
ft_split_whitespaces	libft_srcs/ft_split_whitespaces.c	/^char			**ft_split_whitespaces(char *str)$/;"	f
ft_split_whitespaces_nokots	libft_srcs/ft_split_whitespaces_nokots.c	/^char			**ft_split_whitespaces_nokots(char *str)$/;"	f
ft_str_alloccpy	libft_srcs/ft_strsplit.c	/^static char	*ft_str_alloccpy(char const *src, size_t size)$/;"	f	file:
ft_str_is_printable	libft_srcs/ft_str_is_printable.c	/^int		ft_str_is_printable(char *str)$/;"	f
ft_str_isalpha	libft_srcs/ft_str_isalpha.c	/^int	ft_str_isalpha(char *str)$/;"	f
ft_str_mins_to_caps	libft_srcs/ft_str_mins_to_caps.c	/^void	ft_str_mins_to_caps(char *c)$/;"	f
ft_strcat	libft_srcs/ft_strcat.c	/^char	*ft_strcat(char *dest, char *src)$/;"	f
ft_strchr	libft_srcs/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strclr	libft_srcs/ft_strclr.c	/^void	ft_strclr(char *s)$/;"	f
ft_strcmp	libft_srcs/ft_strcmp.c	/^int		ft_strcmp(const char *s1, const char *s2)$/;"	f
ft_strcpy	libft_srcs/ft_strcpy.c	/^char	*ft_strcpy(char *dest, char *src)$/;"	f
ft_strdel	libft_srcs/ft_strdel.c	/^void	ft_strdel(char **as)$/;"	f
ft_strdiff	libft_srcs/ft_strdiff.c	/^char	*ft_strdiff(char *str, char c, int size)$/;"	f
ft_strdup	libft_srcs/ft_strdup.c	/^char	*ft_strdup(const char *src)$/;"	f
ft_strdup_to_quote	libft_srcs/ft_advance_for_quotes.c	/^char	*ft_strdup_to_quote(char *src, char *dst)$/;"	f
ft_strdupfrom_free	libft_srcs/ft_strdupfrom_free.c	/^char	*ft_strdupfrom_free(const char **src, int from)$/;"	f
ft_strequ	libft_srcs/ft_strequ.c	/^int	ft_strequ(char const *s1, char const *s2)$/;"	f
ft_striter	libft_srcs/ft_striter.c	/^void	ft_striter(char *s, void (*f)(char *))$/;"	f
ft_striteri	libft_srcs/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char *))$/;"	f
ft_strjoin	libft_srcs/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strjoinfree	libft_srcs/ft_strjoinfree.c	/^char	*ft_strjoinfree(char **s1, char **s2, char a)$/;"	f
ft_strjoinfree_char_str	libft_srcs/ft_strjoinfree_char_str.c	/^char	*ft_strjoinfree_char_str(char s2, char **s1)$/;"	f
ft_strjoinfree_one	libft_srcs/ft_strjoinfree_one.c	/^char	*ft_strjoinfree_one(char **s1, char *s2, char where)$/;"	f
ft_strjoinfree_str_char	libft_srcs/ft_strjoinfree_str_char.c	/^char	*ft_strjoinfree_str_char(char **s1, char s2)$/;"	f
ft_strlcat	libft_srcs/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f
ft_strlen	libft_srcs/ft_strlen.c	/^size_t	ft_strlen(char *s)$/;"	f
ft_strmap	libft_srcs/ft_strmap.c	/^char	*ft_strmap(char const *s, char (*f)(char))$/;"	f
ft_strmapi	libft_srcs/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncat	libft_srcs/ft_strncat.c	/^char	*ft_strncat(char *dest, char *src, int nb)$/;"	f
ft_strncmp	libft_srcs/ft_strncmp.c	/^int		ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strncpy	libft_srcs/ft_strncpy.c	/^char	*ft_strncpy(char *dst, const char *src, size_t n)$/;"	f
ft_strndup	libft_srcs/ft_strndup.c	/^char	*ft_strndup(const char *src, size_t n)$/;"	f
ft_strndup_free	libft_srcs/ft_strndup_free.c	/^char	*ft_strndup_free(char **src, size_t n)$/;"	f
ft_strnequ	libft_srcs/ft_strnequ.c	/^int	ft_strnequ(char const *s1, char const *s2, size_t n)$/;"	f
ft_strnew	libft_srcs/ft_strnew.c	/^char	*ft_strnew(size_t size)$/;"	f
ft_strnstr	libft_srcs/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t n)$/;"	f
ft_strrchr	libft_srcs/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strsplit	libft_srcs/ft_strsplit.c	/^char		**ft_strsplit(char const *s, char c)$/;"	f
ft_strstr	libft_srcs/ft_strstr.c	/^char	*ft_strstr(const char *haystack, const char *needle)$/;"	f
ft_strstr_whilestr	libft_srcs/ft_strstr_whilestr.c	/^char	*ft_strstr_whilestr(char *haystack, char *needle, char *go)$/;"	f
ft_strstrchr	libft_srcs/ft_strstrchr.c	/^char	*ft_strstrchr(char *haystack, char *needle, char stop)$/;"	f
ft_strstrstr	libft_srcs/ft_strstrstr.c	/^char	*ft_strstrstr(char *haystack, char *needle, char *stop)$/;"	f
ft_strsub	libft_srcs/ft_strsub.c	/^char	*ft_strsub(char const *s, unsigned int start, size_t len)$/;"	f
ft_strtrim	libft_srcs/ft_strtrim.c	/^char	*ft_strtrim(char const *s)$/;"	f
ft_symetric_byte_swap	libft_srcs/ft_symetric_byte_swap.c	/^void	*ft_symetric_byte_swap(void *ptr, int size)$/;"	f
ft_tab_replacestr	libft_srcs/ft_tab_replacestr.c	/^char	**ft_tab_replacestr(char ***tab, char **to_replace, char *cmp)$/;"	f
ft_tabdel	libft_srcs/ft_tabdel.c	/^void	ft_tabdel(void ***str)$/;"	f
ft_tabdup	libft_srcs/ft_tabdup.c	/^char	**ft_tabdup(char **str, int size)$/;"	f
ft_tabdup_add_free	libft_srcs/ft_tabdup_add_free.c	/^char	**ft_tabdup_add_free(char ***tab, char **str, char tofree)$/;"	f
ft_tabdup_and_add	libft_srcs/ft_tabdup_and_add.c	/^char	**ft_tabdup_and_add(char **tab, char *str)$/;"	f
ft_tabsize	libft_srcs/ft_tabsize.c	/^int	ft_tabsize(char **tab)$/;"	f
ft_tolower	libft_srcs/ft_tolower.c	/^int		ft_tolower(int c)$/;"	f
ft_toupper	libft_srcs/ft_toupper.c	/^int		ft_toupper(int c)$/;"	f
ft_u_base_converter	libft_srcs/ft_u_base_converter.c	/^char				*ft_u_base_converter(int base_size, uintmax_t number,$/;"	f
get_char_len	printf_srcs/get_nbr_len.c	/^int			get_char_len(va_list ap, t_printf *argument)$/;"	f
get_flags	printf_srcs/get_modifiers.c	/^int		get_flags(t_printf *argument, const char	*format)$/;"	f
get_hex_ptr_adr	printf_srcs/base_converter.c	/^void						get_hex_ptr_adr(va_list ap, t_printf *argument)$/;"	f
get_modifier	printf_srcs/get_modifiers.c	/^int		get_modifier(t_printf *argument, const char	*format)$/;"	f
get_number_len	printf_srcs/get_nbr_len.c	/^int			get_number_len(va_list ap, t_printf *argument)$/;"	f
get_precision	printf_srcs/get_modifiers.c	/^int		get_precision(va_list ap, t_printf *argument, const char	*format)$/;"	f
get_type	printf_srcs/parsing.c	/^void						get_type(t_printf *argument, const char *format)$/;"	f
get_width	printf_srcs/get_modifiers.c	/^int		get_width(va_list ap, t_printf *argument, const char	*format)$/;"	f
help	printf_srcs/bonus_colors_formatting.c	/^void		help(void)$/;"	f
initialize_elem	printf_srcs/ft_printf.c	/^static t_printf	initialize_elem(void)$/;"	f	file:
int_ft_putchar	libft_srcs/int_ft_putchar.c	/^int	int_ft_putchar(int c)$/;"	f
left_align_output	includes/printf.h	/^	char			left_align_output;$/;"	m	struct:s_printf
location	includes/printf.h	/^	int				location;$/;"	m	struct:s_printf
main	test.c	/^int main()$/;"	f
modifier	includes/printf.h	/^	char			modifier[3];$/;"	m	struct:s_printf
next	includes/get_next_line.h	/^	struct s_gnl	*next;$/;"	m	struct:s_gnl	typeref:struct:s_gnl::s_gnl
next	includes/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
operation	libft_srcs/ft_s_base_converter.c	/^char	*operation(intmax_t number, int base_size, char *result, char minus)$/;"	f
parse	printf_srcs/parsing.c	/^const char			*parse(const char *format, t_printf *argument, t_str *argument_str, va_list ap)$/;"	f
parsing_handler	printf_srcs/ft_printf.c	/^static int		parsing_handler(const char *format, va_list ap)$/;"	f	file:
percentage_presence	includes/printf.h	/^	char			percentage_presence;$/;"	m	struct:s_printf
position	includes/printf.h	/^	int		position;$/;"	m	struct:s_str
precision	includes/printf.h	/^	int				precision;$/;"	m	struct:s_printf
print_bits	libft_srcs/ft_printbits.c	/^char	*print_bits(void *ptr, int size)$/;"	f
print_bits	test.c	/^char	*print_bits(void *ptr, int size) $/;"	f
printf_s_base_converter	printf_srcs/base_converter.c	/^void						printf_s_base_converter(int base_size,$/;"	f
printf_u_base_converter	printf_srcs/base_converter.c	/^void						printf_u_base_converter(int base_size,$/;"	f
rest	includes/get_next_line.h	/^	char			*rest;$/;"	m	struct:s_gnl
s_base_converter_len	printf_srcs/base_converter_len_output.c	/^int							s_base_converter_len(int base_size,$/;"	f
s_gnl	includes/get_next_line.h	/^typedef	struct		s_gnl$/;"	s
s_list	includes/libft.h	/^typedef	struct		s_list$/;"	s
s_printf	includes/printf.h	/^typedef struct		s_printf$/;"	s
s_str	includes/printf.h	/^typedef struct		s_str$/;"	s
send_unicode	printf_srcs/wide_char.c	/^void		send_unicode(void *c, t_printf *argument, int byte_size)$/;"	f
sharp	includes/printf.h	/^	char			sharp;$/;"	m	struct:s_printf
show_sign	includes/printf.h	/^	char			show_sign;$/;"	m	struct:s_printf
sign	includes/printf.h	/^	char			sign[3];$/;"	m	struct:s_printf
store_char_data	printf_srcs/store_char_data.c	/^void		store_char_data(va_list ap, t_printf *argument)$/;"	f
store_data_len	printf_srcs/get_nbr_len.c	/^static int store_data_len(va_list ap, t_printf *argument)$/;"	f	file:
store_data_len_modifier	printf_srcs/get_nbr_len.c	/^static int store_data_len_modifier(va_list ap, t_printf *argument)$/;"	f	file:
store_number_data	printf_srcs/store_nbr_data.c	/^void		store_number_data(va_list ap, t_printf *argument)$/;"	f
store_str_data	printf_srcs/store_char_data.c	/^void		store_str_data(va_list ap, t_printf *argument)$/;"	f
store_string	printf_srcs/parsing.c	/^static const char	*store_string(const char *format, t_printf *argument_specs, t_str *argument_str)$/;"	f	file:
store_unicode	printf_srcs/wide_char.c	/^void		store_unicode(wint_t data, t_printf *argument, int precision)$/;"	f
store_unicode_str	printf_srcs/wide_char.c	/^void		store_unicode_str(wchar_t *data, t_printf *argument)$/;"	f
str	includes/printf.h	/^	char	str[BUFF_SIZE];$/;"	m	struct:s_str
t_gnl	includes/get_next_line.h	/^}					t_gnl;$/;"	t	typeref:struct:s_gnl
t_list	includes/libft.h	/^}					t_list;$/;"	t	typeref:struct:s_list
t_printf	includes/printf.h	/^}					t_printf;$/;"	t	typeref:struct:s_printf
t_str	includes/printf.h	/^}					t_str;$/;"	t	typeref:struct:s_str
take_out_bits	libft_srcs/ft_u_base_converter.c	/^unsigned long long	take_out_bits(uintmax_t to_change, int sizeof_var)$/;"	f
take_out_bits	printf_srcs/base_converter.c	/^unsigned long long	take_out_bits(uintmax_t to_change, int sizeof_var)$/;"	f
terminal_formatting	printf_srcs/bonus_colors_formatting.c	/^const char	*terminal_formatting(const char	*format, t_str *argument)$/;"	f
to_store	includes/printf.h	/^	void			*to_store;$/;"	m	struct:s_printf
treat_and_store_argument	printf_srcs/ft_printf.c	/^static void		treat_and_store_argument(va_list ap, t_printf *argument)$/;"	f	file:
treat_store_modifier_s_data	printf_srcs/store_nbr_data.c	/^static void	treat_store_modifier_s_data(va_list ap, t_printf *argument)$/;"	f	file:
treat_store_modifier_u_data	printf_srcs/store_nbr_data.c	/^static void	treat_store_modifier_u_data(va_list ap, t_printf *argument)$/;"	f	file:
type	includes/printf.h	/^	char			type;$/;"	m	struct:s_printf
type_to_int_base	printf_srcs/get_nbr_len.c	/^static int	type_to_int_base(char type)$/;"	f	file:
type_to_int_base	printf_srcs/store_nbr_data.c	/^static int	type_to_int_base(char type)$/;"	f	file:
u_base_converter_len	printf_srcs/base_converter_len_output.c	/^int							u_base_converter_len(int base_size,$/;"	f
update_str	printf_srcs/fill_str_update_index.c	/^void	update_str(t_str	*argument, void *to_cpy, int mem_op_size)$/;"	f
width	includes/printf.h	/^	int				width;$/;"	m	struct:s_printf
